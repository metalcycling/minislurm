# Ubuntu packages

- name: Upgrading packages in the nodes
  hosts: all
  tasks:
    - name: Upgrade packages
      apt:
        force_apt_get: yes
        upgrade: dist
      become: yes
      become_method: sudo

- name: Installing packages in the nodes
  hosts: all
  tasks:
    - name: Install packages
      apt:
        pkg:
          - vim
          - build-essential
          - screen
          - curl
          - wget
          - git
          - python3
          - python3-pip
          - iputils-ping
        state: latest
        update_cache: true

# DNS with node names

- name: Get IPs of the nodes and build DNS
  hosts: localhost
  tasks:
    - command:
        cmd: bash -c "head -n 1 ../infrastructure/.nodes_ips.dat"
      register: head_ip

    - command:
        cmd: bash -c "sed 1d ../infrastructure/.nodes_ips.dat"
      register: compute_ips

    - command:
        cmd: bash -c "seq 0 $(wc -l ../infrastructure/.nodes_ips.dat | awk '{ print $1 - 1 }')"
      register: compute_indices

- name: Update hosts file
  hosts: all
  vars:
    head_ip: "{{ hostvars['localhost'].head_ip.stdout }}"
    compute_ips: "{{ hostvars['localhost'].compute_ips.stdout | split }}"
    compute_indices: "{{ hostvars['localhost'].compute_indices.stdout | split }}"
  tasks:
    - command:
        cmd: bash -c "echo '{{ head_ip }}      head' >> /etc/hosts"

    - command:
        cmd: bash -c "echo '{{ item[1] }}      compute-{{ item[0] }}' >> /etc/hosts"
      loop: "{{ compute_indices | zip(compute_ips) }}"

# Connect all-to-all

- name: Generate SSH key pairs
  hosts: all
  tasks:
    - openssh_keypair:
        path: ~/.ssh/id_rsa
      register: keypair

    - fetch:
        src: ~/.ssh/id_rsa.pub
        dest: public_keys

- name: Aggregate public keys into a single file
  hosts: localhost
  tasks:
    - command:
        cmd: bash -c "cat ~/.ssh/id_rsa.pub > authorized_keys && cat $(find . -name *.pub) >> authorized_keys"

- name: Copy public keys to the nodes so they can talk to each other
  hosts: all
  tasks:
    - copy:
        src: authorized_keys
        dest: ~/.ssh
        owner: root
        group: root
        mode: 0664

- name: Add trusted connections to the known_hosts file in all the nodes
  hosts: all
  tasks:
    - copy:
        src: ../infrastructure/.nodes_ips.dat
        dest: ~/
        owner: root
        group: root
        mode: 0664

    - command:
        cmd: bash -c "for node_ip in $(cat .nodes_ips.dat); do ssh -o StrictHostKeyChecking=no root@${node_ip} echo 'Connected'; done;"

    - file:
        path: ~/.nodes_ips.dat
        state: absent

# MUNGE setup

- name: Install MUNGE
  hosts: all
  tasks:
    - apt:
        pkg:
          - munge
        state: latest
        update_cache: true

- name: Get a reference MUNGE key taken from the head node
  hosts: head
  tasks:
    - fetch:
        src: /etc/munge/munge.key
        dest: munge
      register: munge

- name: Copy reference MUNGE key to all the nodes
  hosts: all
  tasks:
    - copy:
        src: "{{ hostvars[groups.head[0]].munge.dest }}"
        dest: /etc/munge
        owner: munge
        group: munge
        mode: 0600

# SLURM setup

- name: Create admin account
  hosts: all
  tasks:
    - group:
        name: admin
        state: present

    - user:
        name: admin
        password: "{{ 'admin' | password_hash('sha512') }}"
        shell: /bin/bash
        home: /home/admin
        create_home: true
        group: admin
        groups: sudo
        append: true

    - copy:
        dest: /etc/sudoers.d/admin
        content: "admin ALL=(ALL) NOPASSWD:ALL"
        mode: 0440

    - file:
        path: /home/admin/.ssh
        state: directory
        owner: admin
        group: admin
        mode: 0755

    - copy:
        src: /home/metalcycling/.ssh/id_rsa.pub
        dest: /home/admin/.ssh/authorized_keys
        owner: admin
        group: admin
        mode: 0664

- name: Install SLURM
  hosts: all
  vars:
    compute_ips: "{{ hostvars['localhost'].compute_ips.stdout | split }}"
  tasks:
    - apt:
        pkg:
          - slurmd
          - slurm-client
          - slurmctld
          - munge
        state: latest
        update_cache: true

    - copy:
        src: "{{ item }}"
        dest: /etc/slurm
        mode: 0664
      loop:
        - slurm.conf
        - cgroup.conf

    - command:
        cmd: bash -c "sed -i '/NodeName/c\NodeName=compute-[0-{{ compute_ips | length - 1 }}] CPUs=1 State=UNKNOWN' /etc/slurm/slurm.conf"

    - command:
        cmd: bash -c "sed -i '/PartitionName/c\PartitionName=cluster Nodes=compute-[0-{{ compute_ips | length - 1 }}] Default=YES MaxTime=INFINITE State=UP' /etc/slurm/slurm.conf"

    - file:
        path: /var/spool/slurmd
        state: directory
        owner: admin
        group: admin
        mode: 0755

- name: Start SLURM services on the head node
  hosts: head
  tasks:
    - command:
        cmd: bash -c "service munge start"

    - command:
        cmd: bash -c "service slurmctld start"

- name: Start SLURM services on the compute nodes
  hosts: compute
  tasks:
    - command:
        cmd: bash -c "service munge start"

    - command:
        cmd: bash -c "slurmd -N $(hostname)"
